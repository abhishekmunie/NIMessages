// Generated by CoffeeScript 1.8.0
var $, app, bodyParser, child_process, cleanUp, config, crypto, errorHandler, express, favicon, fs, http, logger, netService, path, pool, publishNetService, server, spawn;

fs = require('fs');

path = require('path');

http = require('http');

crypto = require('crypto');

child_process = require('child_process');

express = require('express');

favicon = require('serve-favicon');

logger = require('morgan');

bodyParser = require('body-parser');

errorHandler = require('errorhandler');

config = {
  pow_host: 'identityserver',
  net_service_name: 'Identity Server'
};

app = express();

spawn = child_process.spawn;

netService = void 0;

if ('development' === app.get('env')) {
  $ = require('NodObjC');
  $.framework('Foundation');
  pool = $.NSAutoreleasePool('alloc')('init');
}

app.set('port', process.env.PORT || process.env.C9_PORT || process.env.VCAP_APP_PORT || process.env.VMC_APP_PORT || 0);

app.use(favicon(__dirname + '/www/favicon.ico'));

app.use(logger('dev'));

app.use(bodyParser.json());

app.use(bodyParser.urlencoded({
  extended: true
}));

app.use(express["static"](path.join(__dirname, 'www')));

app.post('/generate/identity', function(req, res) {
  var bitSize, clientName, emailAddress, pass;
  clientName = req.param('name');
  emailAddress = req.param('email');
  pass = req.param('pass');
  bitSize = req.param('bitSize');
  if (clientName === '') {
    clientName = 'JohnAppleseed';
  }
  if (emailAddress === '') {
    emailAddress = 'johnappleseed@example.com';
  }
  if (pass === '') {
    pass = 'test';
  }
  return crypto.randomBytes(32, function(ex, buf) {
    var clientFileName, genCert;
    clientFileName = buf.toString('hex');
    console.log('Generating Identity\n======================================================');
    console.log('Name:', clientName);
    console.log('Email:', emailAddress);
    console.log('Pass:', pass);
    console.log('Bit Size:', bitSize);
    genCert = spawn('sh', ['gencert.sh', clientFileName, "email:" + emailAddress, clientName, emailAddress, pass, bitSize]);
    genCert.stdout.pipe(process.stdout);
    genCert.stderr.pipe(process.stderr);
    return genCert.on('close', function(code) {
      if (code !== 0) {
        console.error("grep process exited with code " + code);
        res.send({
          err: {
            code: code
          }
        });
        return;
      }
      console.log('Successful.\n------------------------------------------------------');
      return res.sendFile("" + clientFileName + ".p12", {
        root: __dirname + '/cert/',
        dotfiles: 'deny'
      }, function(err) {
        if (err) {
          console.error(err);
        }
        return fs.unlink("cert/" + clientFileName + ".p12", function(err) {
          if (err) {
            return console.error(err);
          }
        });
      });
    });
  });
});

if ('development' === app.get('env')) {
  app.use(errorHandler());
}

publishNetService = function(port) {
  var MyNetServiceDelegate, myNetServiceDelegate;
  MyNetServiceDelegate = $.NSObject.extend('MyNetServiceDelegate');
  MyNetServiceDelegate.addMethod('netServiceWillPublish:', 'v@:@', function(self, _cmd, sender) {
    return console.log('Net Service will Publish:', sender);
  });
  MyNetServiceDelegate.addMethod('netService:didNotPublish:', 'v@:@:@', function(self, _cmd, sender, errorDict) {
    return console.log('Net Service', sender, 'did not Publish:', errorDict);
  });
  MyNetServiceDelegate.addMethod('netServiceDidPublish:', 'v@:@', function(self, _cmd, sender) {
    return console.log('Net Service did Publish:', sender);
  });
  MyNetServiceDelegate.addMethod('netServiceDidStop:', 'v@:@', function(self, _cmd, sender) {
    return console.log('Net Service did Stop:', sender);
  });
  MyNetServiceDelegate.register();
  myNetServiceDelegate = MyNetServiceDelegate('alloc')('init');
  netService = $.NSNetService('alloc')('initWithDomain', $(''), 'type', $('_http._tcp.'), 'name', $(config.net_service_name), 'port', port);
  netService('setDelegate', myNetServiceDelegate);
  return netService('publishWithOptions', 0);
};

cleanUp = function() {
  if ('development' === app.get('env')) {
    netService.stop();
    return pool('drain');
  }
};

server = app.listen(app.get('port'), function() {
  var host, port, powFile, powHost;
  host = server.address().address;
  port = server.address().port;
  console.log('App listening on port: %s', port);
  if ('development' === app.get('env') && process.platform === 'darwin' && config.pow_host) {
    powFile = path.resolve(process.env['HOME'], ".pow/" + config.pow_host);
    powHost = config.pow_host;
    return fs.writeFile(powFile, port, function(err) {
      var unhost;
      if (err) {
        return console.error(err);
      }
      console.log("Hosted on: " + powHost + ".dev");
      publishNetService(port);
      unhost = function() {
        var e;
        try {
          fs.unlinkSync(powFile);
          console.log("Unhosted from: " + powHost + ".dev");
          cleanUp();
        } catch (_error) {
          e = _error;
          if (err) {
            return console.error(err);
          }
        }
      };
      process.on('SIGINT', function() {
        unhost();
        process.exit();
      });
      process.on('exit', function(code) {
        unhost();
      });
    });
  }
});
